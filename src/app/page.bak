"use client";

import { useEffect, useRef, useState } from "react";
import { useCrawl } from "../hooks/useCrawl";
import GroupedTimeline from "../components/GroupedTimeline";
import Modal from "../components/Modal";

export default function TimelinePage() {
  const [query, setQuery] = useState("");
  const { requestId, running, error, events, start, stop } = useCrawl();

  const [analysisInfo, setAnalysisInfo] = useState<{ requestId: string; sseUrl: string } | null>(null);
  const [analysisError, setAnalysisError] = useState<string | null>(null);

  // Modal state
  const [modalOpen, setModalOpen] = useState(false);
  const [modalJob, setModalJob] = useState<{
    url: string;
    title?: string;
    company?: string;
    location?: string;
    id?: string;
    description?: string;
  } | null>(null);

  const esRef = useRef<EventSource | null>(null);
  const [connected, setConnected] = useState(false);

  const handleAnalyze = async (url: string, item?: any) => {
    console.log("[TimelinePage] handleAnalyze invoked", { url, hasItem: !!item });
    setModalJob({
      url,
      title: item?.title,
      company: item?.company,
      location: item?.location,
      id: item?.id,
      description: item?.description,
    });
    console.log("[TimelinePage] opening modal now");
    setModalOpen(true);

    setAnalysisError(null);
    setAnalysisInfo(null);
    setConnected(false);
    try {
      const res = await fetch("/api/analysis", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ jobUrl: url }),
      });
      if (!res.ok) {
        const t = await res.text();
        throw new Error(`POST /api/analysis failed: ${res.status} ${t}`);
      }
      const data = await res.json();
      console.log("[TimelinePage] analysis started:", data);
      setAnalysisInfo({ requestId: data.requestId, sseUrl: data.sseUrl });
    } catch (e: any) {
      console.error("[TimelinePage] analysis error:", e);
      setAnalysisError(e?.message || "Failed to start analysis");
    }
  };

  const connectSse = () => {
    if (!analysisInfo) return;
    if (esRef.current) {
      try { esRef.current.close(); } catch {}
      esRef.current = null;
    }

    const es = new EventSource(analysisInfo.sseUrl);
    esRef.current = es;

    es.addEventListener("open", () => {
      console.log("[Analysis SSE] open");
    });

    es.addEventListener("connected", (e) => {
      setConnected(true);
      console.log("[Analysis SSE] connected", (e as MessageEvent).data);
    });

    es.addEventListener("analysis", (e) => {
      try {
        const data = JSON.parse((e as MessageEvent).data);
        const kind = data?.kind || data?.type || "(no kind)";
        console.log(`[Analysis SSE] analysis kind=${kind}`, data);
      } catch {
        console.log("[Analysis SSE] analysis (raw)", (e as MessageEvent).data);
      }
    });

    es.addEventListener("done", (e) => {
      console.log("[Analysis SSE] done", (e as MessageEvent).data);
      setConnected(false);
      try { es.close(); } catch {}
      esRef.current = null;
    });

    const names = [
      "parsingStart",
      "parsingComplete",
      "summarizingStart",
      "summarizingComplete",
      "generatingResumeStart",
      "generatingCoverLetterStart",
      "crewLog",
      "generatingComplete",
      "analysisSuccess",
      "analysisFailed",
    ];
    for (const name of names) {
      es.addEventListener(name, (evt) => {
        try {
          const data = JSON.parse((evt as MessageEvent).data);
          console.log(`[Analysis SSE] ${name}`, data);
        } catch {
          console.log(`[Analysis SSE] ${name}`, (evt as MessageEvent).data);
        }
      });
    }

    es.onerror = () => {
      console.warn("[Analysis SSE] error/closed");
      setConnected(false);
      try { es.close(); } catch {}
      esRef.current = null;
    };
  };

  useEffect(() => {
    return () => {
      if (esRef.current) {
        try { esRef.current.close(); } catch {}
        esRef.current = null;
      }
    };
  }, []);

  return (
    <div className="relative z-0 mx-auto max-w-3xl p-4 space-y-4">
      <h1 className="text-2xl font-semibold">Crawl Timeline</h1>

      <div className="flex gap-2">
        <input
          className="flex-1 rounded border px-3 py-2"
          placeholder="e.g., backend,java"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          disabled={running}
        />
        <button
          className="rounded bg-blue-600 px-4 py-2 text-white disabled:opacity-60"
          onClick={() => start(query)}
          disabled={running}
        >
          {running ? "Crawling..." : "Start Crawl"}
        </button>
        {running && (
          <button className="rounded border px-3 py-2" onClick={stop}>
            Stop
          </button>
        )}
      </div>

      <div className="text-sm text-gray-600 space-y-1">
        {requestId && (
          <div>
            Crawl Request: <code>{String(requestId).slice(0, 12)}</code>
          </div>
        )}

        <div className="text-xs text-gray-500">modalOpen: {String(modalOpen)}</div>

        {analysisInfo && (
          <div className="space-y-1">
            <div className="text-green-700">
              Analysis started. requestId: <code>{analysisInfo.requestId}</code>
            </div>
            <div className="flex items-center gap-2">
              <code className="text-xs">{analysisInfo.sseUrl}</code>
              <button
                className="rounded border px-2 py-1 text-sm"
                onClick={connectSse}
                disabled={connected}
                title="Connect to analysis SSE"
              >
                {connected ? "Connected" : "Connect SSE"}
              </button>
            </div>
          </div>
        )}
      </div>

      {error && (
        <div className="rounded border border-red-300 bg-red-50 p-3 text-red-700">
          {error}
        </div>
      )}
      {analysisError && (
        <div className="rounded border border-red-300 bg-red-50 p-3 text-red-700">
          {analysisError}
        </div>
      )}

      <GroupedTimeline items={events} onAnalyze={handleAnalyze} />

      {!running && events.length === 0 && (
        <p className="text-gray-500">No results yet. Start a crawl to see items here.</p>
      )}

      <Modal
        open={modalOpen}
        onClose={() => {
          setModalOpen(false);
        }}
        title="Analyze Job"
        footer={
          <div className="flex w-full items-center justify-between">
            <div className="text-xs text-gray-500">
              {modalJob?.url ? <span>URL: {modalJob.url}</span> : null}
            </div>
            <div className="flex gap-2">
              <button
                className="rounded border px-3 py-2 hover:bg-gray-50"
                onClick={() => setModalOpen(false)}
              >
                Close
              </button>
              <button
                className="rounded bg-blue-600 px-3 py-2 text-white hover:bg-blue-700"
                onClick={() => {
                  console.log("[Modal] Generate clicked for job:", modalJob);
                }}
              >
                Generate
              </button>
            </div>
          </div>
        }
      >
        <div className="space-y-2">
          <div className="text-sm text-gray-500">Job Details</div>
          <div className="rounded border p-3">
            <div className="font-medium">{modalJob?.title ?? "Untitled job"}</div>
            <div className="text-sm text-gray-600">
              {modalJob?.company ? modalJob.company : "Unknown company"}
              {modalJob?.location ? ` Â· ${modalJob.location}` : ""}
            </div>
            {modalJob?.description ? (
              <p className="mt-2 text-sm">{modalJob.description}</p>
            ) : (
              <p className="mt-2 text-sm text-gray-500">No description available.</p>
            )}
          </div>

          <div className="space-y-1">
            <div className="text-sm text-gray-500">Analysis Stream</div>
            <div className="h-40 overflow-auto rounded border bg-gray-50 p-2 text-xs text-gray-700">
              <p>Waiting to connect...</p>
              <p className="text-gray-500">In Step 4, SSE updates will appear here.</p>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  );
}